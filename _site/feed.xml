<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-02-28T11:49:42+00:00</updated><id>http://localhost:4000/</id><title type="html">data-1.science</title><subtitle>Science and Technology Articles</subtitle><entry><title type="html">Understanding Shared Libraries in Linux</title><link href="http://localhost:4000/understanding-shared-libraries-in-linux/" rel="alternate" type="text/html" title="Understanding Shared Libraries in Linux" /><published>2018-02-20T00:00:00+00:00</published><updated>2018-02-20T00:00:00+00:00</updated><id>http://localhost:4000/understanding-shared-libraries-in-linux</id><content type="html" xml:base="http://localhost:4000/understanding-shared-libraries-in-linux/">#### Digest
&gt;In programming, a library is an assortment of pre-compiled pieces of code that can be reused in a program. Libraries simplify life for programmers, in that they provide reusable functions, routines, classes, data structures and so on (written by a another programmer), which they can use in their programs. For instance, if you are building an application that needs to perform math operations, you don’t have to create a new math function for that, you can simply use existing functions in libraries for that programming language. Examples of libraries in Linux include libc (the standard C library) or glibc (GNU version of the standard C library), libcurl (multiprotocol file transfer library), libcrypt (library used for encryption, hashing, and encoding in C) and many more.

#### Extract
&gt;In programming, a library is an assortment of pre-compiled pieces of code that can be reused in a program. Libraries simplify life for programmers, in that they provide reusable functions, routines, classes, data structures and so on (written by a another programmer), which they can use in their programs. For instance, if you are building an application that needs to perform math operations, you don’t have to create a new math function for that, you can simply use existing functions in libraries for that programming language....

#### Factsheet
&gt;In programming, a library is an assortment of pre-compiled pieces of code that can be reused in a program. Libraries simplify life for programmers, in that they provide reusable functions, routines, classes, data structures and so on (written by a another programmer), which they can use in their programs. Linux supports two classes of libraries, namely: Static libraries – are bound to a program statically at compile time; Dynamic or shared libraries – are loaded when a program is launched and loaded into memory and binding occurs at run time. Dynamic or shared libraries can further be categorized into: Dynamically linked libraries – here a program is linked with the shared library and the kernel loads the library (in case it’s not in memory) upon execution; Dynamically loaded libraries – the program takes full control by calling functions with the library. Shared libraries are named in two ways: the library name (a.k.a soname) and a “filename” (absolute path to file which stores library code). For example, the soname for libc is libc.so.6: where lib is the prefix, c is a descriptive name, so means shared object, and 6 is the version. And its filename is: /lib64/libc.so.6. Note that the soname is actually a symbolic link to the filename.

[Visit Link](https://www.linux.com/news/understanding-shared-libraries-linux)</content><author><name>Tecmint</name></author><category term="C standard library" /><category term="Library (computing)" /><category term="C (programming language)" /><category term="Digital technology" /><category term="Computing" /><category term="Computer programming" /><category term="Software" /><category term="Areas of computer science" /><category term="Software engineering" /><category term="Computers" /><category term="Computer engineering" /><category term="Software development" /><category term="Information technology management" /><summary type="html">Digest In programming, a library is an assortment of pre-compiled pieces of code that can be reused in a program. Libraries simplify life for programmers, in that they provide reusable functions, routines, classes, data structures and so on (written by a another programmer), which they can use in their programs. For instance, if you are building an application that needs to perform math operations, you don’t have to create a new math function for that, you can simply use existing functions in libraries for that programming language. Examples of libraries in Linux include libc (the standard C library) or glibc (GNU version of the standard C library), libcurl (multiprotocol file transfer library), libcrypt (library used for encryption, hashing, and encoding in C) and many more.</summary></entry><entry><title type="html">Migrating to Linux: An Introduction</title><link href="http://localhost:4000/migrating-to-linux-an-introduction/" rel="alternate" type="text/html" title="Migrating to Linux: An Introduction" /><published>2018-02-20T00:00:00+00:00</published><updated>2018-02-20T00:00:00+00:00</updated><id>http://localhost:4000/migrating-to-linux-an-introduction</id><content type="html" xml:base="http://localhost:4000/migrating-to-linux-an-introduction/">#### Digest
&gt;Computer systems running Linux are everywhere. Linux runs our Internet services, from Google search to Facebook, and more. Linux also runs in a lot of devices, including our smartphones, televisions, and even cars. Of course, Linux can also run on your desktop system. If you are new to Linux, or you would just like to try something different on your desktop computer, this series of guides will briefly cover the basics and help you in migrating to Linux from another system.

#### Extract
&gt;Title:&amp;nbsp;Migrating to Linux: An Introduction31 OctLearn more...

#### Factsheet
&gt;In other operating systems, many things are bundled together and are just a part of the package. In Linux, however, each component is called out separately. For example, under Windows, the graphical interface is just a part of Windows. With Linux, you can choose from multiple graphical environments, like GNOME, KDE Plasma, Cinnamon, and MATE, to name a few. At a high level, a Linux installation includes the following things: The kernel; System programs and files residing on disk; A graphical environment; A package manager; Applications.

[Visit Link](https://www.linux.com/blog/learn/intro-to-linux/2017/10/migrating-linux-introduction)</content><author><name>JohnBonesio</name></author><category term="Linux" /><category term="Operating system" /><category term="Linux distribution" /><category term="Package manager" /><category term="Graphical user interface" /><category term="Application software" /><category term="Desktop environment" /><category term="Microsoft Windows" /><category term="Digital technology" /><category term="Operating system technology" /><category term="Computer architecture" /><category term="Operating system families" /><category term="Computer engineering" /><category term="Computers" /><category term="Software" /><category term="Digital media" /><category term="Computing" /><category term="System software" /><summary type="html">Digest Computer systems running Linux are everywhere. Linux runs our Internet services, from Google search to Facebook, and more. Linux also runs in a lot of devices, including our smartphones, televisions, and even cars. Of course, Linux can also run on your desktop system. If you are new to Linux, or you would just like to try something different on your desktop computer, this series of guides will briefly cover the basics and help you in migrating to Linux from another system.</summary></entry><entry><title type="html">How open science evolved in 2017</title><link href="http://localhost:4000/how-open-science-evolved-in-2017/" rel="alternate" type="text/html" title="How open science evolved in 2017" /><published>2018-02-18T00:00:00+00:00</published><updated>2018-02-18T00:00:00+00:00</updated><id>http://localhost:4000/how-open-science-evolved-in-2017</id><content type="html" xml:base="http://localhost:4000/how-open-science-evolved-in-2017/">#### Digest
&gt;digest unavailable

#### Extract
&gt;The scientific community has embraced openness since long before computers came on the scene. The ideals of sharing knowledge and building on the work of others are fundamental to how scientific discovery happens. This year, Opensource.com contributors shared some of the ways open source software and science teamed up. Check out the top six science articles on the site in 2017. 1. 3 open source alternatives to MATLAB read more...

#### Factsheet
&gt;factsheet unavailable

[Visit Link](https://opensource.com/article/17/12/best-open-science)</content><author><name>bcotton</name></author><category term="Open-source software" /><category term="Science" /><category term="Computing" /><category term="Red Hat" /><category term="Information Age" /><category term="Digital technology" /><category term="Software" /><category term="Technology" /><category term="Cyberspace" /><category term="Intellectual works" /><category term="Digital media" /><summary type="html">Digest digest unavailable</summary></entry><entry><title type="html">How organizations can become more inclusive of people with disabilities</title><link href="http://localhost:4000/how-organizations-can-become-more-inclusive-of-people-with-disabilities/" rel="alternate" type="text/html" title="How organizations can become more inclusive of people with disabilities" /><published>2018-02-18T00:00:00+00:00</published><updated>2018-02-18T00:00:00+00:00</updated><id>http://localhost:4000/how-organizations-can-become-more-inclusive-of-people-with-disabilities</id><content type="html" xml:base="http://localhost:4000/how-organizations-can-become-more-inclusive-of-people-with-disabilities/">#### Digest
&gt;Perhaps the first step toward creating a more inclusive community is to acknowledge that it involves a much wider group of individuals than is typically discussed. Communities have a lot of work to do, and particularly for small teams, this can present an extra challenge. A diverse workforce should include people with disabilities. Here are ways organizations can be more inclusive of the disabled.

#### Extract
&gt;“Diversity is being invited to the party, inclusion is being asked to dance.” -Verna Myers With this in mind, communities should invite as many individuals as possible to dance the night away. Diversity and inclusion get a lot of attention in the tech community these days, perhaps more than in any other industry. Many experts agree that when people of different backgrounds work together to find solutions to problems, the result is a broader scope of innovation and better outcomes. read more...

#### Factsheet
&gt;According to many sources, at least 15% to 20% of people in the U.S. alone struggle with some type of disability. About 70% of these are disabilities such as blindness, cognitive challenges, or chronic disease, which are not visible from the outside. This group includes many talented individuals who can bring unique and valuable experiences and insights to projects and workplaces. Open source communities are particularly well-positioned for workforce inclusion, because technology can help level the playing field for people with disabilities.

[Visit Link](https://opensource.com/article/17/12/diversity-and-inclusion)</content><author><name>mschulz</name></author><category term="Accessibility" /><category term="Diversity (business)" /><category term="Disability" /><category term="Visual impairment" /><category term="Hearing loss" /><category term="American Sign Language" /><category term="Social exclusion" /><category term="Screen reader" /><category term="JavaScript" /><category term="World Wide Web" /><category term="Assistive technology" /><category term="Technology" /><category term="Computing" /><category term="Communication" /><summary type="html">Digest Perhaps the first step toward creating a more inclusive community is to acknowledge that it involves a much wider group of individuals than is typically discussed. Communities have a lot of work to do, and particularly for small teams, this can present an extra challenge. A diverse workforce should include people with disabilities. Here are ways organizations can be more inclusive of the disabled.</summary></entry><entry><title type="html">What's the difference between a fork and clone?</title><link href="http://localhost:4000/what-039-s-the-difference-between-a-fork-and-clone/" rel="alternate" type="text/html" title="What&amp;#039;s the difference between a fork and clone?" /><published>2018-02-18T00:00:00+00:00</published><updated>2018-02-18T00:00:00+00:00</updated><id>http://localhost:4000/what-039-s-the-difference-between-a-fork-and-clone</id><content type="html" xml:base="http://localhost:4000/what-039-s-the-difference-between-a-fork-and-clone/">#### Digest
&gt;There can be many reasons for a project fork. Perhaps the project has lain fallow for a while and someone wants to revive it. Perhaps the company that has underwritten the project has been acquired and the community is afraid that the new parent company may close the project. Or perhaps there's a schism within the community itself, where a portion of the community has decided to go a different direction with the project. 

#### Extract
&gt;A recent headline on Hacker News caused a stir (original tweet here): read more...

#### Factsheet
&gt;To &quot;fork&quot; means to take a copy of the project, rename it, and start a new project and community around the copy. If you wish to contribute to a project that uses git as its version control system, you'll need to create a clone of it. This will create a local clone of the repository, against which you can make whatever changes you like. If you wish to contribute the changes back to the original repository, you must send a pull request. Unless the maintainers of the original repository grant you access to it directly, you cannot contribute to that repository without both a clone of it and a pull request against it. Clones, unlike forks, are technical actions and do not need to involve the community or any social changes.

[Visit Link](https://opensource.com/article/17/12/fork-clone-difference)</content><author><name>vmbrasseur</name></author><category term="Distributed version control" /><category term="Software engineering" /><category term="Digital media" /><category term="Computer engineering" /><category term="Public commons" /><category term="Open-source movement" /><category term="Free content" /><category term="Free software" /><category term="Software" /><category term="Computing" /><category term="Open content" /><category term="Intellectual works" /><summary type="html">Digest There can be many reasons for a project fork. Perhaps the project has lain fallow for a while and someone wants to revive it. Perhaps the company that has underwritten the project has been acquired and the community is afraid that the new parent company may close the project. Or perhaps there’s a schism within the community itself, where a portion of the community has decided to go a different direction with the project.</summary></entry><entry><title type="html">Inspiring the Next Generation of Open Source</title><link href="http://localhost:4000/inspiring-the-next-generation-of-open-source/" rel="alternate" type="text/html" title="Inspiring the Next Generation of Open Source" /><published>2018-02-18T00:00:00+00:00</published><updated>2018-02-18T00:00:00+00:00</updated><id>http://localhost:4000/inspiring-the-next-generation-of-open-source</id><content type="html" xml:base="http://localhost:4000/inspiring-the-next-generation-of-open-source/">#### Digest
&gt;digest unavailable

#### Extract
&gt;Zachary Dupont wrote a letter to his hero Linus Torvalds back in 2014. Here, they catch up on stage at Open Source Summit NA 2017. The Linux Foundation works through our projects, training and certification programs, events and more to bring people of all backgrounds into open source. We meet a lot of people, but find the drive and enthusiasm of some of our youngest community members to be especially infectious. In the past couple of months, we’ve invited 13-year-old algorithmist and cognitive developer Tanmay Bakshi, 11-year-old hacker and cybersecurity ambassador Reuben Paul, and 15-year-old programmer Keila Banks to speak at Linux Foundation conferences. In 2014 when he was 12, Zachary Dupont wrote a letter to his hero Linus Torvalds. W...

#### Factsheet
&gt;factsheet unavailable

[Visit Link](https://www.linuxfoundation.org/blog/inspiring-next-generation-open-source/)</content><author><name>Linux Foundation</name></author><category term="Open-source model" /><category term="Linux Foundation" /><category term="Computing" /><category term="Software" /><category term="Technology" /><summary type="html">Digest digest unavailable</summary></entry><entry><title type="html">Open Source Threat Modeling</title><link href="http://localhost:4000/open-source-threat-modeling/" rel="alternate" type="text/html" title="Open Source Threat Modeling" /><published>2018-02-18T00:00:00+00:00</published><updated>2018-02-18T00:00:00+00:00</updated><id>http://localhost:4000/open-source-threat-modeling</id><content type="html" xml:base="http://localhost:4000/open-source-threat-modeling/">#### Digest
&gt;Threat modeling can be usefully done with a pen, whiteboard and one or more security-aware people who understand how their application is built, and this is MUCH better than not threat modeling at all. However, to do it effectively with multiple people and multiple project iterations you need a tool. Commercial tools are available, and Microsoft provides a free tool for Windows only, but established, free, open-source, cross-platform tools are non-existent. OWASP Threat Dragon aims to fill this gap.

#### Extract
&gt;A guest blog post by Mike Goodwin. What is threat modeling? Application threat modeling is a structured approach to identifying ways that an adversary might try to attack an application and then designing mitigations to prevent, detect or reduce the impact of those attacks. The description of an application’s threat model is identified as one of the criteria for the Linux CII Best Practises Silver badge. Why threat modeling? It is well established that defense-in-depth is a key principle for network security and the same is true for application security. But although most application developers will intuitively understand this as a concept, it can be hard to put it into practice. After many years and sleepless nights, worrying and fretting...

#### Factsheet
&gt;Application threat modeling is a structured approach to identifying ways that an adversary might try to attack an application and then designing mitigations to prevent, detect or reduce the impact of those attacks. Threat modeling is an exceptionally powerful technique for building defense-in-depth into an application design. It is also great for identifying security flaws at design time where they are cheap and easy to correct. These kinds of flaws are often subtle and hard to detect by traditional testing approaches.

[Visit Link](https://www.linuxfoundation.org/blog/open-source-threat-modeling/)</content><author><name>Linux Foundation</name></author><category term="Threat (computer)" /><category term="Threat model" /><category term="Cross-platform" /><category term="Systems engineering" /><category term="Computer engineering" /><category term="Digital media" /><category term="Software engineering" /><category term="Information technology" /><category term="Areas of computer science" /><category term="Digital technology" /><category term="Software" /><category term="Information technology management" /><category term="Technology" /><category term="Computing" /><summary type="html">Digest Threat modeling can be usefully done with a pen, whiteboard and one or more security-aware people who understand how their application is built, and this is MUCH better than not threat modeling at all. However, to do it effectively with multiple people and multiple project iterations you need a tool. Commercial tools are available, and Microsoft provides a free tool for Windows only, but established, free, open-source, cross-platform tools are non-existent. OWASP Threat Dragon aims to fill this gap.</summary></entry><entry><title type="html">What's the difference between open source software and free software?</title><link href="http://localhost:4000/what-039-s-the-difference-between-open-source-software-and-free-software/" rel="alternate" type="text/html" title="What&amp;#039;s the difference between open source software and free software?" /><published>2018-02-18T00:00:00+00:00</published><updated>2018-02-18T00:00:00+00:00</updated><id>http://localhost:4000/what-039-s-the-difference-between-open-source-software-and-free-software</id><content type="html" xml:base="http://localhost:4000/what-039-s-the-difference-between-open-source-software-and-free-software/">#### Digest
&gt;Free software, open source software, FOSS, FLOSS. Are they the same? Different? Does it matter?

#### Extract
&gt;Do you use &quot;open source software&quot; or &quot;free software&quot;? Although there are different rules for free software licenses (four freedoms) and open source licenses (Open Source Definition), what is not apparent from those two sets of rules is: read more...

#### Factsheet
&gt;The concept of &quot;free software&quot; was developed by Richard Stallman in the 1980s. The focus is on what the recipient of software is permitted to do with the software: &quot;Roughly, it means that the users have the freedom to run, copy, distribute, study, change, and improve the software.&quot; &quot;Open source&quot; focuses on the practical consequences enabled by these licenses: surprisingly effective collaboration on software development.

[Visit Link](https://opensource.com/article/17/11/open-source-or-free-software)</content><author><name>skpeterson</name></author><category term="Free and open-source software" /><category term="Free software" /><category term="Open-source model" /><category term="GNU General Public License" /><category term="Software" /><category term="Computing" /><category term="Open-source movement" /><category term="Free content" /><category term="Intellectual works" /><category term="Public commons" /><category term="Intellectual property activism" /><category term="Open content" /><category term="Digital media" /><category term="Computer engineering" /><category term="Criticism of intellectual property" /><category term="Sharing" /><category term="Copyright licenses" /><category term="Software distribution" /><category term="Copyright law" /><category term="Free goods and services" /><category term="Digital technology" /><summary type="html">Digest Free software, open source software, FOSS, FLOSS. Are they the same? Different? Does it matter?</summary></entry><entry><title type="html">How to use cron in Linux</title><link href="http://localhost:4000/how-to-use-cron-in-linux/" rel="alternate" type="text/html" title="How to use cron in Linux" /><published>2018-02-18T00:00:00+00:00</published><updated>2018-02-18T00:00:00+00:00</updated><id>http://localhost:4000/how-to-use-cron-in-linux</id><content type="html" xml:base="http://localhost:4000/how-to-use-cron-in-linux/">#### Digest
&gt;digest unavailable

#### Extract
&gt;One of the challenges (among the many advantages) of being a sysadmin is running tasks when you'd rather be sleeping. For example, some tasks (including regularly recurring tasks) need to run overnight or on weekends, when no one is expected to be using computer resources. I have no time to spare in the evenings to run commands and scripts that have to operate during off-hours. And I don't want to have to get up at oh-dark-hundred to start a backup or major update. read more...

#### Factsheet
&gt;factsheet unavailable

[Visit Link](https://opensource.com/article/17/11/how-use-cron-linux)</content><author><name>dboth</name></author><category term="Cron" /><category term="Computing" /><category term="Software" /><category term="Operating system technology" /><category term="Computers" /><category term="Computer programming" /><category term="System software" /><category term="Computer engineering" /><category term="Computer architecture" /><category term="Areas of computer science" /><category term="Digital technology" /><summary type="html">Digest digest unavailable</summary></entry><entry><title type="html">7 tips for nailing your job interview</title><link href="http://localhost:4000/7-tips-for-nailing-your-job-interview/" rel="alternate" type="text/html" title="7 tips for nailing your job interview" /><published>2018-02-18T00:00:00+00:00</published><updated>2018-02-18T00:00:00+00:00</updated><id>http://localhost:4000/7-tips-for-nailing-your-job-interview</id><content type="html" xml:base="http://localhost:4000/7-tips-for-nailing-your-job-interview/">#### Digest
&gt;Be more prepared, confident, and impressive at your next job interview with these strategies.

#### Extract
&gt;So far in this job search tips series, we've covered resumes and cover letters, but naturally there's a lot more to the job hunt than just writing documents. Assuming you've wowed your potential employer with your skills, expertise, and contributions to free and open source software, now you get to start the interview process. read more...

#### Factsheet
&gt;factsheet unavailable

[Visit Link](https://opensource.com/article/17/11/7-job-interview-tips)</content><author><name>vmbrasseur</name></author><category term="Research" /><category term="Interview" /><summary type="html">Digest Be more prepared, confident, and impressive at your next job interview with these strategies.</summary></entry></feed>